module Main where

doubleEven :: [Int] -> [Int]
doubleEven = map (\x -> if even x then x * 2 else x)

sumOdd :: [Int] -> Int
sumOdd = sum . filter odd

absList :: [Int] -> [Int]
absList = map abs

myLength :: [a] -> Int
myLength [] = 0
myLength (_:xs) = 1 + myLength xs

myReverse :: [a] -> [a]
myReverse = foldl (flip (:)) []

myMaximum :: Ord a => [a] -> a
myMaximum [] = error "Порожній список"
myMaximum [x] = x
myMaximum (x:xs) = max x (myMaximum xs)

pythagoreanTriples :: [(Int, Int, Int)]
pythagoreanTriples = 
    [(a, b, c) | c <- [1..20], 
                 a <- [1..c], 
                 b <- [a..c],
                 a^2 + b^2 == c^2]

-- Ефективна реалізація Fibonacci з акумуляторами
fibonacci :: Int -> Int
fibonacci n
    | n < 0     = error "Від'ємний індекс"
    | otherwise = fibHelper n 0 1
  where
    fibHelper 0 a _ = a
    fibHelper n a b = fibHelper (n-1) b (a + b)

main :: IO ()
main = do
    putStrLn "=== Тестування всіх завдань ==="
    
    putStrLn "\n1. doubleEven [1,2,3,4]:"
    print $ doubleEven [1,2,3,4]
    putStrLn "Очікується: [1,4,3,8]"
    
    putStrLn "\n2. sumOdd [1,2,3,4,5]:"
    print $ sumOdd [1,2,3,4,5]
    putStrLn "Очікується: 9"
    
    putStrLn "\n3. absList [-3,5,-7]:"
    print $ absList [-3,5,-7]
    putStrLn "Очікується: [3,5,7]"
    
    putStrLn "\n4. myLength [1,2,3,4]:"
    print $ myLength [1,2,3,4]
    putStrLn "Очікується: 4"
    
    putStrLn "\n5. myReverse [1,2,3]:"
    print $ myReverse [1,2,3]
    putStrLn "Очікується: [3,2,1]"
    
    putStrLn "\n6. myMaximum [3,7,2,9,4]:"
    print $ myMaximum [3,7,2,9,4]
    putStrLn "Очікується: 9"
    
    putStrLn "\n7. Перші 5 піфагорових трійок:"
    print $ take 5 pythagoreanTriples
    
    putStrLn "\n8. fibonacci 6:"
    print $ fibonacci 6
    putStrLn "Очікується: 8"
    
    putStrLn "\n=== Всі тести завершено ==="
